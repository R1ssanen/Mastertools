
struct Edge {
    u32 hash;
    u32 index_0, index_1;
};

u32 indices[] = {...};
std::vector<vec4> vertices = {...};

std::unordered_map<u32, Edge> edge_table;
std::vector<u32> new_indices;

for (auto& edge : form_edges(indices, draw_mode)) {

    auto it = edge_table.find(edge.hash);
    
    // exists
    if (it != edge_table.end()) {
        Edge& existing = it->second;
        new_indices.push_back(existing.index_0);
        new_indices.push_back(existing.index_1);
    
    } else {
        vec4 new_vertex;
        
        // whole edge outside, continue
        if (!clip_edge(vertices[edge.index_0], vertices[edge.index_1], new_vertex)) continue;

        // update edge vertex, push new edge
        vertices[edge.index_1] = new_vertex;
        edge_table[edge.hash] = edge;
    }

}

